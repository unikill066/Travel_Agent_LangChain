# imports
import os, sys, streamlit as st, datetime
from dotenv import load_dotenv
load_dotenv()

# Add project root to path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from tralogger import get_logger
from src.agent.graph_wf import GraphWorkflow

logger = get_logger(__name__)

# Initialize the agent
agent = GraphWorkflow()

st.set_page_config(page_title="Travel Agent", page_icon=":airplane:", layout="centered", initial_sidebar_state="expanded")
st.title("Travel Agent")
st.subheader("Generate travel plans with AI")

if "messages" not in st.session_state:
    st.session_state.messages = []

st.header("How can I help you in planning a trip? Let me know where do you want to visit.")

with st.form(key="query_form", clear_on_submit=True):
    user_input = st.text_input("User Input", placeholder="e.g. Plan a trip to Goa for 5 days")
    submit_button = st.form_submit_button("Send")

if submit_button and user_input.strip():
    try:
        # Show thinking spinner while agent processes
        with st.spinner("Bot is thinking..."):
            # Get response from the agent
            from langchain_core.messages import HumanMessage
            
            # Create a message for the agent
            messages = [HumanMessage(content=user_input)]
            
            # Get the response from the agent
            response = agent.agent_workflow({"messages": messages})
            
            # Extract the answer from the response
            answer = response["messages"][-1].content
            
            markdown_content = f"""# üåç AI Travel Plan

**Generated:** {datetime.datetime.now().strftime('%Y-%m-%d at %H:%M')}  
**Created by:** Atriyo's Travel Agent

---

{answer}

---

*This travel plan was generated by AI. Please verify all information, especially prices, operating hours, and travel requirements before your trip.*
"""
            st.markdown(markdown_content)

    except Exception as e:
        st.error(f"‚ùå An error occurred while processing your request: {str(e)}")
        logger.error(f"Unexpected error: {e}")
        raise  # Re-raise for debugging if needed




# # imports
# import os, sys, streamlit as st, requests, datetime
# from dotenv import load_dotenv
# load_dotenv()

# from tralogger import get_logger
# logger = get_logger(__name__)

# BASE_URL = "http://localhost:8356" 

# st.set_page_config(page_title="Travel Agent", page_icon=":airplane:", layout="centered", initial_sidebar_state="expanded")
# st.title("Travel Agent")
# st.subheader("Generate travel plans with AI")


# if "messages" not in st.session_state:
#     st.session_state.messages = []

# st.header("How can I help you in planning a trip? Let me know where do you want to visit.")

# with st.form(key="query_form", clear_on_submit=True):
#     user_input = st.text_input("User Input", placeholder="e.g. Plan a trip to Goa for 5 days")
#     submit_button = st.form_submit_button("Send")

# if submit_button and user_input.strip():
#     try:
#         # # Show user message
#         # Show thinking spinner while backend processes
#         with st.spinner("Bot is thinking..."):
#             payload = {"question": user_input}
#             response = requests.post(f"{BASE_URL}/query", json=payload)

#         if response.status_code == 200:
#             answer = response.json().get("answer", "No answer returned.")
#             markdown_content = f"""# üåç AI Travel Plan

#             # **Generated:** {datetime.datetime.now().strftime('%Y-%m-%d at %H:%M')}  
#             # **Created by:** Atriyo's Travel Agent

#             ---

#             {answer}

#             ---

#             *This travel plan was generated by AI. Please verify all information, especially prices, operating hours, and travel requirements before your trip.*
#             """
#             st.markdown(markdown_content)
#         else:
#             st.error(" Bot failed to respond: " + response.text)

#     except Exception as e:
#         raise f"The response failed due to {e}"