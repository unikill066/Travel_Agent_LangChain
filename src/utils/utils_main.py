"""
Developer: Nikhil Nageshwar Inturi (inturinikhilnageshwar@gmail.com) GitHub: @unikill066
Date: 2025-07-13

This module contains the main utils for the travel agent such as file utils, for fetching config
and saving agent generated reponse into a document.

Math utils for budgetting and Model utils for loading models are also included.
"""

# imports
import os, yaml, datetime, sys
from pathlib import Path
sys.path.append("../../")
from tralogger import get_logger
logger = get_logger(__name__)
from dotenv import load_dotenv
load_dotenv()

from typing import Literal, Optional, Any
from pydantic import BaseModel, Field
from langchain_groq import ChatGroq
from langchain_openai import ChatOpenAI

__all__ = [
    "MathUtils",
    "save_document",
    "load_config",
    "ConfigLoader",
    "ModelLoader",
]

# file utils
def load_config(config_fp) -> dict:
    """
    Load the yaml config file.
    Example
    -------
        >>> from utils_main import load_config
        >>> load_config("config.yaml")
    """
    with open(config_fp, "r") as file:
        config = yaml.safe_load(file)
    logger.info(f"Loaded config: {config}")
    return config

def save_document(response: str, directory: Path = "./output"):
    """
    Save the agent generated response into a document.
    Example
    -------
        >>> from utils_main import save_document
        >>> save_document("Hello World")
    """
    try:
        os.makedirs(directory, exist_ok=True)

        markdown_content = f"""# 🌍 AI Travel Plan

        # **Generated:** {datetime.datetime.now().strftime('%Y-%m-%d at %H:%M')}  
        # **Created by:** unikill'066's Travel Agent

        ---

        {response}

        ---

        *This travel plan was generated by AI. Please verify all information, especially prices, operating hours, and travel requirements before your trip.*
        """

        timestamp = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        filename = f"{directory}/AI_Trip_Planner_{timestamp}.md"
        with open(filename, "w", encoding="utf-8") as file:
            file.write(markdown_content)
        logger.info(f"Saved document to {filename}")
        return filename

    except Exception as e:
        logger.error(f"Error saving document: {e}")
        return None
    finally:
        logger.info("save_document() finished")


# math utils
class MathUtils:
    """
    Math utils for budgetting.
    Example
    -------
        >>> from utils_main import MathUtils
        >>> math_utils = MathUtils()
        >>> math_utils.add(2, 3)
        5
    """
    def __init__(self):
        logger.info("MathUtils initialized")
    
    @staticmethod
    def add(a: float, b: float) -> float:
        """
        Add two numbers.
        Example: add(2, 3) -> 5
        a: First number
        b: Second number
        returns: Sum of the two numbers
        """
        logger.info(f"Adding {a} and {b}")
        return a + b

    @staticmethod
    def multiply(a: float, b: float) -> float:
        """
        Multiply two numbers.
        Example: multiply(2, 3) -> 6
        a: First number
        b: Second number
        returns: Product of the two numbers
        """
        logger.info(f"Multiplying {a} and {b}")
        return a * b

    @staticmethod
    def total(numbers: list[float]) -> float:
        """
        Calculate the sum / total of a list of numbers.
        Example: total([1, 2, 3, 4, 5]) -> 15
        numbers: List of numbers
        returns: Sum / total of the numbers
        """
        logger.info(f"Calculating total of {numbers}")
        return sum(numbers) if numbers else 0

    @staticmethod
    def budget_per_day(total_budget: float, num_days: int) -> float:
        """
        Calculate the budget per day.
        Example: budget_per_day(1000, 5) -> 200
        total_budget: Total budget
        num_days: Number of days
        returns: Budget per day, i.e., total_budget / num_days if num_days > 0 else 0
        """
        logger.info(f"Calculating budget per day for {total_budget} over {num_days} days")
        return total_budget / num_days if num_days > 0 else 0


# model utils
class ConfigLoader:
    """
    Config loader for loading the config file.
    Example
    -------
        >>> from utils_main import ConfigLoader
        >>> config_loader = ConfigLoader()
        >>> config_loader["llm"]["groq"]["model_name"]
    """
    def __init__(self):
        logger.info("ConfigLoader initialized")
        self.config = load_config()

    def __getitem__(self, key):
        return self.config[key]

class ModelLoader(BaseModel):
    """
    Model loader for loading the model.
    Example
    -------
        >>> from utils_main import ModelLoader
        >>> model_loader = ModelLoader()
        >>> model_loader.load_llm()
    """
    model_provider: Literal["openai", "groq"] = "groq"
    config: Optional[ConfigLoader] = Field(default=None, exclude=True)

    def model_past_init(self, __context: Any) -> None:
        """
        Initialize the model loader.
        """
        self.config = ConfigLoader()

    class Config:
        """
        Config for the model loader.
        """
        arbitrary_types_allowed = True

    def load_llm(self):
        """
        Load the model.
        Example
        -------
            >>> from utils_main import ModelLoader
            >>> model_loader = ModelLoader()
            >>> model_loader.load_llm()
            <ChatOpenAI object at 0x7f8d8d8d8d8d> / <ChatGroq object at 0x7f8d8d8d8d8d>
        """
        if self.model_provider == "openai":
            openai_api_key = os.getenv("OPENAI_API_KEY")
            if openai_api_key is None:
                raise ValueError("OpenAI API key not found")
            llm = ChatOpenAI(api_key=openai_api_key, model_name="o4-mini")
        elif self.model_provider == "groq":
            groq_api_key = os.getenv("GROQ_API_KEY")
            if groq_api_key is None:
                raise ValueError("Groq API key not found")
            model_name = self.config["llm"]["groq"]["model_name"]
            llm = ChatGroq(api_key=groq_api_key, model_name=model_name)
        else:
            raise ValueError("Invalid model provider")
        return llm